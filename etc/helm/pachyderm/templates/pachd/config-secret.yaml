{{- /*
SPDX-FileCopyrightText: Pachyderm, Inc. <info@pachyderm.com>
SPDX-License-Identifier: Apache-2.0
*/ -}}
{{ if .Values.pachd.activateEnterprise }}
{{- $oidcSecret := "" -}}
{{- $enterpriseSecret := "" -}}
{{- if .Release.IsUpgrade -}}
{{- $oidcSecret = required "For an upgrade release, a value is required for pachd.oidc.clientSecret" .Values.pachd.oidc.clientSecret -}}
{{- $enterpriseSecret = required "For an upgrade release, a value is required for pachd.enterpriseSecret" .Values.pachd.enterpriseSecret -}}
{{- else -}}
{{- $enterpriseSecret = default (randAlphaNum 32) .Values.pachd.enterpriseSecret -}}
{{- $oidcSecret = default (randAlphaNum 32) .Values.pachd.oidc.clientSecret -}}
{{- end -}}
apiVersion: v1
kind: Secret
metadata:
  name: pachyderm-bootstrap-config
  namespace: {{ .Release.Namespace }}
stringData:
  # authConfig is the configuration for pachd as an OIDC client
  # ** note: `authConfig.client_secret` must equal `oidcClients.secret`
  authConfig: |
    client_id: {{ required "For Authentication, an OIDC Client ID for this pachd must be set." .Values.pachd.oidc.clientId }}
    client_secret: {{ $oidcSecret }}
    issuer: {{ required "For Authentication, an OIDC Issuer for this pachd must be set." .Values.pachd.oidc.issuer }}
    localhost_issuer: {{ if .Values.pachd.enterpriseLicenseKey }}true{{ else }}false{{ end }}
    require_email_verified: false
    redirect_uri: {{ required "For Authentication, an OIDC Redirect URI for this pachd must be set." .Values.pachd.oidc.redirectURI }}
    scopes:
    - email
    - profile
    - groups
    - openid 

{{ if eq .Values.deployTarget "LOCAL" }}
  # clusterRoleBindings is a set of user -> role mappings to apply
  clusterRoleBindings: |
    robot:test:
    - repoReader
{{- end }}

# when registering a cluster with a separate enterprise server
{{ if not .Values.pachd.enterpriseLicenseKey }}
  enterpriseServerAddress: {{ required "To register a pachd instance with an enterprise server, the enterprise server's address must be provided." .Values.pachd.enterpriseServerAddress }}

  enterpriseRootToken: {{ required "To register this pachd as an enterprise member, the enterprise root token must be provided." .Values.pachd.enterpriseRootToken }}

  # enterpriseClusters is the set of pachds covered by license service 
  enterpriseClusters: |
    - address: {{ .Values.pachd.enterpriseCallbackAddress }}
      id: {{ required "To register a pachd instance with an enterprise server, a unique ID must be set for this instance" .Values.pachd.oidc.clientId }}
      secret: {{ $enterpriseSecret }}
      user_address: grpc://localhost:30650
      cluster_deployment_id: $CLUSTER_DEPLOYMENT_ID

  # enterpiseConfig points the pachd to a license service (in this case itself)
  enterpriseConfig: |
    id: {{ required "To register a pachd instance with an enterprise server, a unique ID must be set for this instance" .Values.pachd.oidc.clientId }}
    license_server: {{ .Values.pachd.enterpriseServerAddress }}
    secret: {{ $enterpriseSecret }}
{{ end }}

  # identityServiceConfig configures the OIDC provider
  # id_token_expiry value is parsed into golang's time.Duration: https://pkg.go.dev/time#example-ParseDuration
  identityServiceConfig: |  
    issuer: {{ required "For Authentication, an OIDC Issuer for this pachd must be set." .Values.pachd.oidc.issuer}}
    id_token_expiry: 24h

# idps is the set of Identity Providers to support for logging in
{{ if .Values.pachd.oidc.setupConnector }}
{{ if .Values.pachd.oidc.mockIDP }} 
  idps: |
    - id: test
      name: test
      type: mockPassword
      jsonConfig: '{"username": "admin", "password": "password"}' 
{{ else }}
  idps: |
    - id: {{ required "To connect to an Upstream OIDC Provider, an ID to represent that Provider must be set." .Values.pachd.oidc.connector.id }}
      jsonConfig: >- 
        {
            "issuer": {{ required "To connect to an Upstream OIDC Provider, it's issuer value must be set." .Values.pachd.oidc.connector.issuer | quote }},
            "clientID": {{ required "To connect to an Upstream OIDC Provider, it's client ID value must be set." .Values.pachd.oidc.connector.clientID | quote }},
            "clientSecret": {{ required "To connect to an Upstream OIDC Provider, it's client secret value must be set." .Values.pachd.oidc.connector.clientSecret | quote }},
            "redirectURI": {{ required "To connect to an Upstream OIDC Provider, a redirect URI for it to call back to must be set." .Values.pachd.oidc.connector.redirectURI | quote }},
            "insecureEnableGroups": true,
            "insecureSkipEmailVerified": true,
            "insecureSkipIssuerCallbackDomainCheck": true,
            "forwardedLoginParams": ["login_hint"]
        }
      name: {{ required "To connect to an Upstream OIDC Provider, an ID to represent that Provider must be set." .Values.pachd.oidc.connector.id }}
      type: oidc
{{ end }}
{{ end }}

{{ if .Values.pachd.enterpriseLicenseKey }}
  license: {{ required "Enterprise license key required" .Values.pachd.enterpriseLicenseKey | quote }}

  enterpriseSecret: {{ $enterpriseSecret }}
{{ end }}

  # oidcClients is the set of OIDC clients registered with the OIDC provider
  # the config-pod (job that sets up pachyderm using this data) resolves oidcClient 
  # values that are environment variables.
  oidcClients: |
    - id: {{ required "For Authentication, an OIDC Client ID for this pachd must be set." .Values.pachd.oidc.clientId }}
      name: {{ .Values.pachd.oidc.clientId }}
      secret: {{ $oidcSecret }}
      redirect_uris:
      - {{ required "To Create pachd's OIDC Client, it's redirect URI must be set." .Values.pachd.oidc.redirectURI }}
    {{- if .Values.console.enabled }}
      trusted_peers:
      - {{ required "To setup console, an OIDC Client ID for this console instance must be set." .Values.console.config.oauthClientID }}
    - id:  {{ .Values.console.config.oauthClientID }}
      name: {{ .Values.console.config.oauthClientID }}
      secret: $CONSOLE_OAUTH_CLIENT_SECRET
      redirect_uris:
      - {{ required "To connect Console to Pachyderm, Console's Redirect URI must be set." .Values.console.config.oauthRedirectURI }}
    {{- end }}

  # rootToken is the auth token used to communicate with the cluster as the root user
  rootToken: {{ default (randAlphaNum 32) .Values.pachd.rootToken | quote }}
{{- end }}
